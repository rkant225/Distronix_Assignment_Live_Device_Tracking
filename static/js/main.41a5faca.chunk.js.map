{"version":3,"sources":["components/Home/Home.js","components/Map/GoogleMaps.js","components/Map/Map.js","components/App.js","Redux/reducers/index.js","index.js"],"names":["Home","renderInput","fieldProps","className","label","input","style","color","meta","touched","error","required","value","undefined","onSubmit","formData","props","history","push","deviceId","sensorId","this","handleSubmit","Field","name","component","validate","type","disabled","submitting","pristine","onClick","reset","React","Component","reduxForm","form","destroyOnUnmount","GoogleMaps","state","isMarkerClicked","lat","lng","updateCurrentLocation","a","setState","Math","random","locationUpdateTimer","setInterval","clearInterval","defaultZoom","defaultCenter","center","position","onCloseClick","withScriptjs","withGoogleMap","Map","console","log","match","params","googleMapURL","loadingElement","height","containerElement","mapElement","to","App","path","exact","render","combineReducers","formReducer","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.41a5faca.chunk.js","sourcesContent":["import React from 'react';\r\nimport {reduxForm, Field} from 'redux-form';\r\n\r\nclass Home extends React.Component {\r\n    // Common method to render Input\r\n    renderInput =(fieldProps) =>{\r\n        return (\r\n            <div className=\"field\">\r\n                <label>{fieldProps.label}</label>\r\n                <input {...fieldProps.input}/>\r\n                <span style={{color : 'red'}}>{fieldProps.meta.touched && fieldProps.meta.error}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // method to validate required field\r\n    required = (value) =>{\r\n        return value === \"\" || value === undefined ? \"This field is required...!!!\" : undefined;\r\n    }\r\n\r\n    // Form submit handler, Currently we are simply navigating to Map's component.\r\n    // Navigation will happen only if user have provided some data for both the fields.\r\n    onSubmit = (formData) => {\r\n        this.props.history.push(`/map/${formData.deviceId}/${formData.sensorId}`)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"info-collection-form\">\r\n                <h2>Track location of your device</h2>\r\n                <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\r\n                    <Field name=\"deviceId\" component={this.renderInput} label=\"Device_ID\" validate={[this.required]}/>\r\n                    <Field name=\"sensorId\" component={this.renderInput} label=\"Sensor_ID\" validate={[this.required]}/>\r\n                    <button type=\"submit\" className=\"ui green button\" disabled={this.props.submitting}>Track Device</button>\r\n                    <button type=\"button\" className=\"ui red button\" disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>Clear Values</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default reduxForm({form : 'streamForm', destroyOnUnmount: true})(Home);","import React, { useState } from 'react';\r\nimport {GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow} from 'react-google-maps';\r\nimport axios from 'axios'; // used to fecth data from remote API\r\n\r\nclass GoogleMaps extends React.Component{\r\n    state={isMarkerClicked : false, lat : 20, lng : 40}\r\n\r\n    // Update location of device every 5 seconds.\r\n    componentDidMount(){\r\n        this.locationUpdateTimer = setInterval(()=>this.updateCurrentLocation(),5000)\r\n    }\r\n\r\n    // Clear the timer once component is being unmounted.\r\n    componentWillUnmount(){\r\n        clearInterval(this.locationUpdateTimer)\r\n    }\r\n\r\n    // this function will fetch data from given end point, \r\n    // currently API is not working so updating location with Random value every 5 seconds.\r\n    updateCurrentLocation =async ()=>{\r\n        //const response = await (await axios.get('http://35.197.106.255:3000/api/v1.1/lastMultiple', {Type: \"x-www-form-urlencoded\", Key: \"devid\", Value: \"4d872a60f3f17a6a02a27fa72d303a34\"})).data;\r\n        // this.setState({\r\n        //     lat : response.lat, \r\n        //     lng : response.lng\r\n        // })\r\n\r\n        this.setState({\r\n            lat : Math.random() * 100, \r\n            lng : Math.random() * 100\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {isMarkerClicked, lat, lng} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <GoogleMap defaultZoom={3} defaultCenter={{lat : lat, lng : lng}} center={{lat : lat, lng : lng}}>\r\n                        <Marker position={{lat : lat, lng : lng}} onClick={()=>this.setState({isMarkerClicked : true})}/>\r\n                        {isMarkerClicked && \r\n                            <InfoWindow position={{lat : lat, lng : lng}} onCloseClick={()=>this.setState({isMarkerClicked : false})}>\r\n                                <div>\r\n                                    Device Name : {lat}\r\n                                    <br/>\r\n                                    Sensor Name : {lng}\r\n                                </div>\r\n                            </InfoWindow>\r\n                        }\r\n                </GoogleMap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withScriptjs(withGoogleMap(GoogleMaps));","import React from 'react';\r\nimport GoogleMaps from './GoogleMaps';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Map = (props)=>{\r\n    console.log(props)\r\n\r\n    // Extract the Device-ID and Sensor-ID from URL.\r\n    const {deviceId, sensorId} = props.match.params;\r\n\r\n    return(\r\n        <div className=\"map-container\">\r\n            <GoogleMaps \r\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDp-dmXFwL_w1dcUX2dp_znT4zYNB_yPCY\" \r\n                loadingElement={<div style={{ height: `100%` }} />}\r\n                containerElement={<div style={{ height: `400px` }} />}\r\n                mapElement={<div style={{ height: `100%` }} />}\r\n                sensorId={sensorId}\r\n                deviceId={deviceId}\r\n            />\r\n            <h1>\r\n                <Link className=\"home-link\" to=\"/\">Home</Link>\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom';\n\nimport Home from './Home/Home';\nimport Map from './Map/Map';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"ui container\">\n        <Route path=\"/\" exact render={(props)=><Home {...props}/>}/>\n        <Route path=\"/map/:deviceId/:sensorId\" exact render={(props)=><Map {...props}/>}/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import {combineReducers} from 'redux'\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nexport default combineReducers({\r\n    form : formReducer,\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport rootReducer from './Redux/reducers/index';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App/></Provider> , document.getElementById('root'));"],"sourceRoot":""}