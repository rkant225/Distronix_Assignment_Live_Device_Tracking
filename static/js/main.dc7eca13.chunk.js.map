{"version":3,"sources":["components/Home/Home.js","components/Map/GoogleMaps.js","components/ParkingLot/Bay.js","Redux/actions/index.js","components/ParkingLot/ParkingLot.js","components/App.js","Redux/reducers/ParkingLotReducer.js","Redux/reducers/index.js","index.js"],"names":["Home","renderInput","fieldProps","className","label","input","style","color","meta","touched","error","required","value","undefined","onSubmit","formData","props","history","push","deviceId","this","handleSubmit","Field","name","component","validate","type","disabled","submitting","pristine","onClick","reset","React","Component","reduxForm","form","destroyOnUnmount","GoogleMaps","state","isMarkerClicked","lat","lng","updateCurrentLocation","a","setState","Math","random","locationUpdateTimer","setInterval","clearInterval","defaultZoom","defaultCenter","center","position","onCloseClick","withScriptjs","withGoogleMap","Bay","getColor","status","toggleStatus","bayId","toggleBayStatus","bayRef","createRef","id","height","width","active","backgroundColor","connect","console","log","URL","dispatch","axios","post","response","payload","data","ParkingLot","match","params","fetchParkingLots","lots","to","length","map","lot","key","ParkingLotReducer","get","App","path","exact","render","initialState","getUpdatedLots","updatedLot","finalUpdatedLots","indexToBeUpdated","findIndex","x","action","combineReducers","formReducer","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dc7eca13.chunk.js","sourcesContent":["import React from 'react';\r\nimport {reduxForm, Field} from 'redux-form';\r\n\r\nclass Home extends React.Component {\r\n    // Common method to render Input\r\n    renderInput =(fieldProps) =>{\r\n        return (\r\n            <div className=\"field\">\r\n                <label>{fieldProps.label}</label>\r\n                <input {...fieldProps.input}/>\r\n                <span style={{color : 'red'}}>{fieldProps.meta.touched && fieldProps.meta.error}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // method to validate required field\r\n    required = (value) =>{\r\n        return value === \"\" || value === undefined ? \"This field is required...!!!\" : undefined;\r\n    }\r\n\r\n    // Form submit handler, Currently we are simply navigating to Map's component.\r\n    // Navigation will happen only if user have provided some data for both the fields.\r\n    onSubmit = (formData) => {\r\n        // this.props.history.push(`/map/${formData.deviceId}/${formData.sensorId}`)\r\n        this.props.history.push(`/ParkingLot/${formData.deviceId}`)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"info-collection-form\">\r\n                <h2>Track location of your device</h2>\r\n                <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\r\n                    <Field name=\"deviceId\" component={this.renderInput} label=\"Device_ID\" validate={[this.required]}/>\r\n                    <Field name=\"sensorId\" component={this.renderInput} label=\"Sensor_ID\" validate={[this.required]}/>\r\n                    <button type=\"submit\" className=\"ui green button\" disabled={this.props.submitting}>Track Device</button>\r\n                    <button type=\"button\" className=\"ui red button\" disabled={this.props.pristine || this.props.submitting} onClick={this.props.reset}>Clear Values</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default reduxForm({form : 'streamForm', destroyOnUnmount: true})(Home);","import React, { useState } from 'react';\r\nimport {GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow} from 'react-google-maps';\r\nimport axios from 'axios'; // used to fecth data from remote API\r\n\r\nclass GoogleMaps extends React.Component{\r\n    state={isMarkerClicked : false, lat : 20, lng : 40}\r\n\r\n    // Update location of device every 5 seconds.\r\n    componentDidMount(){\r\n        this.locationUpdateTimer = setInterval(()=>this.updateCurrentLocation(),5000)\r\n    }\r\n\r\n    // Clear the timer once component is being unmounted.\r\n    componentWillUnmount(){\r\n        clearInterval(this.locationUpdateTimer)\r\n    }\r\n\r\n    // this function will fetch data from given end point, \r\n    // currently API is not working so updating location with Random value every 5 seconds.\r\n    updateCurrentLocation =async ()=>{\r\n        //const response = await (await axios.get('http://35.197.106.255:3000/api/v1.1/lastMultiple', {Type: \"x-www-form-urlencoded\", Key: \"devid\", Value: \"4d872a60f3f17a6a02a27fa72d303a34\"})).data;\r\n        // this.setState({\r\n        //     lat : response.lat, \r\n        //     lng : response.lng\r\n        // })\r\n\r\n        this.setState({\r\n            lat : Math.random() * 100, \r\n            lng : Math.random() * 100\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {isMarkerClicked, lat, lng} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <GoogleMap defaultZoom={3} defaultCenter={{lat : lat, lng : lng}} center={{lat : lat, lng : lng}}>\r\n                        <Marker position={{lat : lat, lng : lng}} onClick={()=>this.setState({isMarkerClicked : true})}/>\r\n                        {isMarkerClicked && \r\n                            <InfoWindow position={{lat : lat, lng : lng}} onCloseClick={()=>this.setState({isMarkerClicked : false})}>\r\n                                <div>\r\n                                    Device Name : {lat}\r\n                                    <br/>\r\n                                    Sensor Name : {lng}\r\n                                </div>\r\n                            </InfoWindow>\r\n                        }\r\n                </GoogleMap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withScriptjs(withGoogleMap(GoogleMaps));","//Bays\r\n\r\n//ParkingLot\r\n\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as Actions from '../../Redux/actions'; \r\n\r\nclass Bay extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.bayRef = React.createRef();\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     console.log(this.bayRef.current.clientHeight)\r\n    //     this.bayRef.current.height = \"100px\";\r\n    //     this.bayRef.current.width = \"100px\";\r\n    // }\r\n\r\n    getColor = (status) =>{\r\n        return status ? \"#66ff66\" : \"rgba(255,0,0,0.7)\";\r\n    }\r\n\r\n    toggleStatus = (bayId)=>{\r\n        this.props.toggleBayStatus(bayId)\r\n    }\r\n\r\n    render(){\r\n        const {id, height, width, active} = this.props;\r\n        return(\r\n            <div className=\"bay\" style={{height: `${height}px`, width : `${width}px`, backgroundColor : this.getColor(active)}} onClick={() => this.toggleStatus(id)}> \r\n                \r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\n// const mapStateToPRops =(state)=>{\r\n//     return{\r\n//         lots : state.ParkingLotReducer.lots\r\n//     }\r\n// }\r\n\r\nexport default connect(null, {toggleBayStatus : Actions.toggleBayStatus})(Bay);","import axios from 'axios';\r\n\r\nexport const fetchParkingLots = (deviceId)=>{\r\n    const URL = `http://34.71.252.163:5000/parking/lot/${deviceId}`\r\n    return async (dispatch)=>{\r\n        const response = await axios.get(URL);\r\n        dispatch({type : \"FETCH_LOTS\", payload : response.data })\r\n    }\r\n}\r\n\r\nexport const toggleBayStatus =(bayId)=>{\r\n    console.log('CHANGE_LOT_STATUS', bayId);\r\n    const URL = `http://34.71.252.163:5000/parking/bay/${bayId}/toggle`;\r\n\r\n    return async (dispatch)=>{\r\n        const response = await axios.post(URL)\r\n        dispatch({type: \"CHANGE_LOT_STATUS\", payload : response.data})\r\n    }\r\n}","//ParkingLot\r\n\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as Actions from '../../Redux/actions'; \r\nimport Bay from './Bay';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass ParkingLot extends React.Component {\r\n    componentDidMount(){\r\n        const deviceId = this.props.match.params.deviceId;\r\n        // remove this this is just for testing\r\n        //const sampleDeviceID = '4d872a60f3f17a6a02a27fa72d303a34'\r\n\r\n        this.props.fetchParkingLots(deviceId);\r\n    }\r\n\r\n    render(){\r\n        const {lots} = this.props;\r\n        return(\r\n            <div>\r\n                <h1>\r\n                    <Link className=\"home-link\" to=\"/\">Home</Link>\r\n                </h1>\r\n                {lots.length > 0 ?\r\n                    <div className=\"parking-lot-container\">                    \r\n                        {lots.map(lot =>{\r\n                            return(\r\n                                <Bay key={lot.id} id={lot.id} width={lot.width} height={lot.height} active={lot.active}/>\r\n                            );\r\n                        })}                    \r\n                    </div>\r\n              : <h1>No data Found...!!!, please enter valid device ID</h1>}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToPRops =(state)=>{\r\n    return{\r\n        lots : state.ParkingLotReducer.lots\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToPRops, {fetchParkingLots : Actions.fetchParkingLots})(ParkingLot);","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\n\r\nimport Home from './Home/Home';\r\nimport Map from './Map/Map';\r\nimport ParkingLot from './ParkingLot/ParkingLot';\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"ui container\">\r\n        <Route path=\"/\" exact render={(props)=><Home {...props}/>}/>\r\n        {/* <Route path=\"/map/:deviceId/:sensorId\" exact render={(props)=><Map {...props}/>}/> */}\r\n        <Route path=\"/ParkingLot/:deviceId\" exact render={(props)=> <ParkingLot {...props}/>}/>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {lots : []}\r\nconst getUpdatedLots =(lots, updatedLot)=>{\r\n    const finalUpdatedLots = [...lots];\r\n\r\n    const indexToBeUpdated = lots.findIndex(x=> x.id === updatedLot.id);\r\n    if(indexToBeUpdated > -1){\r\n        finalUpdatedLots[indexToBeUpdated] = updatedLot;\r\n    }\r\n    return finalUpdatedLots;\r\n}\r\n\r\nconst ParkingLotReducer = (state=initialState, action)=>{\r\n    switch(action.type){\r\n        case \"FETCH_LOTS\":\r\n            return{\r\n                ...state,\r\n                lots : action.payload\r\n            }\r\n        case \"CHANGE_LOT_STATUS\":\r\n            return{\r\n                ...state,\r\n                lots : [...getUpdatedLots(state.lots, action.payload)]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default ParkingLotReducer;","import {combineReducers} from 'redux'\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport ParkingLotReducer from './ParkingLotReducer';\r\n\r\nexport default combineReducers({\r\n    form : formReducer,\r\n    ParkingLotReducer : ParkingLotReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport rootReducer from './Redux/reducers/index';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(<Provider store={store}><App/></Provider> , document.getElementById('root'));"],"sourceRoot":""}